@include option("tag") {

[class*="#{class("Tag")}"],
a[class*="#{class("Tag")}"],
[class*="#{class("Button")}"],
button,
input[type="button"],
input[type="submit"],
input[type="reset"]
{
	display: inline-block;
	background: var(--components-background);
	color: var(--components-color);
	border: none;
	@include border-radius($tag-border-radius);
	padding: $tag-padding;
	font-size: $tag-font-size;
	line-height: 1;
	vertical-align: middle;
    text-decoration: none;
}

[class*="#{class("Tag")}"],
[class*="#{class("Button")}"]
{
    @include option("components-inverted") {
        &[class*="#{class("(Component)-inverted")}"] {
            background: var(--components-background-inverted);
            color: var(--components-color-inverted);

            &[class*="#{class("(Component)--wired")}"] {
                background: transparent;
                color: var(--components-background-inverted);
                box-shadow: 0 0 0 $tag-border-width var(--components-background-inverted) inset;
            }
        }
    }

    @include option("components-dark") {
        &[class*="#{class("(Component)-dark")}"] {
            color: $components-color-dark;
            background: $components-background-dark;

        	&[class*="#{class("(Component)--wired")}"] {
        		background: transparent;
        		color: $components-background-dark;
        		box-shadow: 0 0 0 $tag-border-width $components-background-dark inset;
        	}
        }
    }

    @include option("components-light") {
        &[class*="#{class("(Component)-light")}"] {
            color: $components-color;
            background: $components-background;

        	&[class*="#{class("(Component)--wired")}"] {
        		background: transparent;
        		color: $components-background;
        		box-shadow: 0 0 0 $tag-border-width $components-background inset;
        	}
        }
    }

    @include option("components-ghost") {
        &[class*="#{class("(Component)-ghost")}"] {
            background: transparent;
            color: var(--body-color);
        }
    }

	@each $component, $bg in $components {
		&[class*="-#{$component}"] {
			background: $bg;

            @if ($bg == transparent) {
                color: var(--body-color);
            } @else {
                color: best-contrast($bg, $body-color, $body-color-dark);
            }

			&[class*="#{class("(Component)--wired")}"] {
				background: transparent;
				color: $bg;
				box-shadow: 0 0 0 $tag-border-width $bg inset;
			}
		}
	}

	&[class*="#{class("(Component)--wired")}"] {
		background: transparent;
		color: var(--components-background);
		box-shadow: 0 0 0 $tag-border-width var(--components-background) inset;
	}
}

a[class*="#{class("Tag")}"],
[class*="#{class("Button")}"],
button,
input[type="button"],
input[type="submit"],
input[type="reset"]
{
    position: relative;
    z-index: 1;
	color: var(--components-color);
    cursor: pointer;

    &::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background: var(--components-background-hover);
    	border-radius: inherit;
        opacity: 0;
        z-index: -1;

        @include transition("opacity");
    }

	&:hover {
        color: var(--components-color);
        text-decoration: none;

        &::after {
            opacity: 1;
        }
    }

    &:focus {
        outline: 0;
        box-shadow: 0 0 0 $tag-focus-outline-size var(--tag-focus-outline-color);
    }

	&:active {
        &::after {
            opacity: 0;
        }
    }
}

a[class*="#{class("Tag")}"],
button[class*="#{class("Tag")}"],
[class*="#{class("Button")}"]
{
    &:hover, &:focus {
        text-decoration: none;
    }

    @include option("components-inverted") {
        &[class*="#{class("(Component)-inverted")}"] {
            &::after {
                background: var(--components-background-hover-inverted);
            }

            &:hover {
                color: var(--components-color-inverted);
            }

            &[class*="#{class("(Component)--wired")}"] {
                color: var(--components-background-inverted);
                box-shadow: 0 0 0 $tag-border-width var(--components-background-inverted) inset;

                &::after {
                    background: var(--components-background-inverted);
                }

                &:hover {
                    color: var(--components-color-inverted);
                }
            }

            &:focus {
                box-shadow: 0 0 0 $tag-focus-outline-size var(--tag-focus-outline-color-inverted);
            }
        }
    }

    @include option("components-dark") {
        &[class*="#{class("(Component)-dark")}"] {
            &::after {
                background: $components-hover-background-dark;
            }

            &:hover {
                color: $components-color-dark;
            }

            &[class*="#{class("(Component)--wired")}"] {
                color: $components-background-dark;
                box-shadow: 0 0 0 $tag-border-width $components-background-dark inset;

                &::after {
                    background: $components-background-dark;
                }

                &:hover {
                    color: $components-color-dark;
                }
            }

            &:focus {
                box-shadow: 0 0 0 $tag-focus-outline-size $tag-focus-outline-color-dark;
            }
        }
    }

    @include option("components-light") {
        &[class*="#{class("(Component)-light")}"] {
            &::after {
                background: $components-hover-background;
            }

            &:hover {
                color: $components-color;
            }

            &[class*="#{class("(Component)--wired")}"] {
                color: $components-background;
                box-shadow: 0 0 0 $tag-border-width $components-background inset;

                &::after {
                    background: $components-background;
                }

                &:hover {
                    color: $components-color;
                }
            }

            &:focus {
                box-shadow: 0 0 0 $tag-focus-outline-size $tag-focus-outline-color;
            }
        }
    }

    @include option("components-ghost") {
        &[class*="#{class("(Component)-ghost")}"] {
            &::after {
                background: transparent;
            }

    		&:hover {
    			color: var(--body-color);
    		}
        }
    }

    &[class*="#{class("(Component)--wired")}"] {
        background: transparent;

        @include transition("color");

		&::after {
            background: var(--components-background);
        }

        &:active {
            &::after {
                opacity: .8;
            }
        }

		&:hover {
			color: var(--components-color);
		}
	}

    @each $component, $bg in $components {
		&[class*="-#{$component}"] {
            @if ($bg == transparent) {
                color: var(--body-color);
            } @else {
                color: best-contrast($bg, $body-color, $body-color-dark);
            }

			background: $bg;

            &::after {
                background: darken($bg, $components-hover-darken);
            }

            &:hover {
                @if ($bg == transparent) {
                    color: var(--body-color);
                } @else {
                    color: best-contrast($bg, $body-color, $body-color-dark);
                }
            }

			&[class*="#{class("(Component)--wired")}"] {
				color: $bg;
				box-shadow: 0 0 0 $tag-border-width $bg inset;

                &::after {
                    background: $bg;
                }

				&:hover {
					color: best-contrast($bg, $body-color, $body-color-dark);
				}
			}

            &:focus {
                box-shadow: 0 0 0 $tag-focus-outline-size lighten($bg, $tag-focus-outline-color-lighten);
            }
		}
	}
}

[class*="#{class("Tag")}"] {
    &[class*="#{class("(Component)--large")}"] {
		padding: $tag-padding-large;
		font-size: $tag-font-size-large;
	}

	&[class*="#{class("(Component)--extra-large")}"] {
		padding: $tag-padding-extra-large;
		font-size: $tag-font-size-extra-large;
	}
}

}
