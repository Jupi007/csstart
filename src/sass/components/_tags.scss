// =======================
// ==== Tag component ====
// =======================

// Create a Tag by adding the .Tag class

@include option("tag") {

.#{class("Tag")},
.#{class("Button")}
{
    --tag-padding: #{$tag-padding};
    --tag-font-size: #{$tag-font-size};
    --tag-background: #{$components-background};
    --tag-background-hover: #{darken($components-background, $components-hover-darken)};
    --tag-color: #{$components-color};
    --tag-focus-outline-color: #{$tag-focus-outline-color};

    @include option("dark-theme") {
        @media (prefers-color-scheme: dark) {
            --tag-background: #{$components-background-dark};
            --tag-background-hover: #{darken($components-background-dark, $components-hover-darken)};
            --tag-color: #{$components-color-dark};
            --tag-focus-outline-color: #{$tag-focus-outline-color-dark};
        }
    }

	display: inline-block;
    position: relative;
    z-index: 1;
	vertical-align: middle;
	padding: var(--tag-padding);
	border: none;
	@include border-radius($tag-border-radius);
	font-size: var(--tag-font-size);
    text-decoration: none;
	line-height: 1;
	background: var(--tag-background);
	color: var(--tag-color);

    @include transition("color");

    // Used to get smooth transitions with :hover and :focus by using opacity transitions - common style of both
    &::after, &:before {
        content: "";
        position: absolute;
        z-index: -1;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        opacity: 0;
        border-radius: inherit;

        @include transition("opacity");
    }

    // Used to get smooth transitions with :hover
    &::after {
        background: var(--tag-background-hover);
    }

    // Used to get smooth transitions with :focus
    &::before {
        box-shadow: 0 0 0 $tag-focus-outline-size var(--tag-focus-outline-color);
    }

    // Wired (border only) variant
    // ===========================
    &#{class("(Component)--wired")} {

        background: transparent;
        color: var(--tag-background);
        // Using inset box-shadow to get the same size as other Buttons
        box-shadow: 0 0 0 $tag-border-width var(--tag-background) inset;

        // Use the same hover background-color as non hover and wired buttons
        &::after {
            background: var(--tag-background);
        }

        &:focus:not(:hover) {
            color: var(--tag-background);
        }
    }

    // Ghost (without background) variant
    // ==================================
    @include option("components-ghost") {
        &-#{class("(Component)-ghost")} {
            --tag-background: transparent;
            --tag-background-hover: transparent;
            --tag-color: var(--body-color)
        }
    }

    // Dark/Light theme variants - enabled only if dark-theme option is set to true
    // ============================================================================
    @include option("dark-theme") {

        // Dynamic inverted variant - ex: use dark scheme colors in a light environment
        @include option("components-inverted") {
            &-#{class("(Component)-inverted")} {
                --tag-background: #{$components-background-dark};
                --tag-background-hover: #{darken($components-background-dark, $components-hover-darken)};
                --tag-color: #{$components-color-dark};
                --tag-focus-outline-color: #{$tag-focus-outline-color-dark};

                @media (prefers-color-scheme: dark) {
                    --tag-background: #{$components-background};
                    --tag-background-hover: #{darken($components-background, $components-hover-darken)};
                    --tag-color: #{$components-color};
                    --tag-focus-outline-color: #{$tag-focus-outline-color};
                }
            }
        }

        // Dark theme variant - always use dark scheme colors
        @include option("components-dark") {
            &-#{class("(Component)-dark")} {
                --tag-background: #{$components-background-dark};
                --tag-background-hover: #{darken($components-background-dark, $components-hover-darken)};
                --tag-color: #{$components-color-dark};
                --tag-focus-outline-color: #{$tag-focus-outline-color-dark};
            }
        }

        // Light theme variant - always use light scheme colors
        @include option("components-light") {
            &-#{class("(Component)-light")} {
                --tag-background: #{$components-background};
                --tag-background-hover: #{darken($components-background, $components-hover-darken)};
                --tag-color: #{$components-color};
                --tag-focus-outline-color: #{$tag-focus-outline-color};
            }
        }
    }

    // Color variants (defined in $components)
    // =======================================
	@each $component, $background in $components {
		&-#{$component} {
			--tag-background: #{$background};
            --tag-background-hover: #{darken($background, $components-hover-darken)};
            --tag-focus-outline-color: #{lighten($background, $tag-focus-outline-color-lighten)};

            @if ($background == transparent) {
                // Use the default color in the case of a transparent background
                --tag-color: var(--body-color);
            } @else {
                // Use the best contrast ratio color with background
                --tag-color: #{best-contrast($background, $body-color, $body-color-dark)};
            }
		}
	}
}

// Interactive states and behaviors
// ================================
a.#{class("Tag")},
.#{class("Button")}
{
    cursor: pointer;

	&:hover {
        text-decoration: none;
        color: var(--tag-color);

        // Show :hover background (defined in :after)
        &::after {
            opacity: 1;
        }
    }

    &:focus {
        text-decoration: none;
    	color: var(--tag-color);
        // Replace outline by a box-shadow (defined in :before)
        outline: 0;

        // Show :focus box-shadow (defined in :before)
        &:not(:active)::before {
            opacity: 1;
        }
    }
}

// Tag sizes (defined in $tag-sizes)
// =================================
.#{class("Tag")} {
    @each $name, $properties in $tag-sizes {
        &--#{$name} {
            --tag-padding: #{nth($properties, 1)};
            --tag-font-size: #{nth($properties, 2)};
        }
    }
}

}
