@include option("tags") {

[class*="Tag"],
a[class*="Tag"],
[class*="Button"],
button,
input[type="button"],
input[type="submit"],
input[type="reset"]
{
	display: inline-block;
	background: var(--components-background);
	color: var(--components-color);
	border: none;
	border-radius: $tag-border-radius;
	padding: $tag-padding;
	font-size: $tag-font-size;
	line-height: 1;
	vertical-align: middle;
    text-decoration: none;
}

[class*="Tag"],
[class*="Button"]
{
    &[class*="-light"] {
        color: $components-color-dark;
        background: $components-background-dark;

    	&[class*="--wired"] {
    		background: transparent;
    		color: $components-background-dark;
    		box-shadow: 0 0 0 $button-border-width $components-background-dark inset;
    	}
    }

    &[class*="-dark"] {
        color: $components-color;
        background: $components-background;

    	&[class*="--wired"] {
    		background: transparent;
    		color: $components-background;
    		box-shadow: 0 0 0 $button-border-width $components-background inset;
    	}
    }

    &[class*="-inversed"] {
        background: var(--components-background-inversed);
    	color: var(--components-color-inversed);

        &[class*="--wired"] {
            background: transparent;
            color: var(--components-background-inversed);
            box-shadow: 0 0 0 $button-border-width var(--components-background-inversed) inset;
        }
    }

	@each $component, $bg in $components {
		&[class*="-#{$component}"] {
			background: $bg;

            @if ($bg == transparent) {
                color: var(--body-color);
            } @else {
                color: contrast($bg, $body-color, $body-color-dark);
            }

			&[class*="--wired"] {
				background: transparent;
				color: $bg;
				box-shadow: 0 0 0 $button-border-width $bg inset;
			}
		}
	}

	&[class*="--wired"] {
		background: transparent;
		color: var(--components-background);
		box-shadow: 0 0 0 $button-border-width var(--components-background) inset;
	}
}

a[class*="Tag"],
[class*="Button"],
button,
input[type="button"],
input[type="submit"],
input[type="reset"]
{
    position: relative;
    z-index: 1;
	color: var(--components-color);
    cursor: pointer;

    &::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background: var(--components-background-hover);
    	border-radius: inherit;
        opacity: 0;
        z-index: -1;

        @include transition("opacity");
    }

	&:hover, &:focus {
        color: var(--components-color);
        text-decoration: none;
    	outline: 0;

        &::after {
            opacity: 1;
        }
    }

	&:active {
        &::after {
            opacity: 0;
        }
    }
}

a[class*="Tag"],
button[class*="Tag"],
[class*="Button"]
{
    &[class*="-light"] {
        background: $components-background-dark;
        color: $components-color-dark;

        &::after {
            background: $components-hover-background-dark;
        }

        &:hover, &:focus {
            color: $components-color-dark;
            text-decoration: none;
        }

        &[class*="--wired"] {
            background: transparent;
            color: $components-background-dark;
            box-shadow: 0 0 0 $button-border-width $components-background-dark inset;

            &::after {
                background: $components-background-dark;
            }

            &:hover, &:focus {
                color: $components-color-dark;
            }
        }
    }

    &[class*="-dark"] {
        background: $components-background;
        color: $components-color;

        &::after {
            background: $components-hover-background;
        }

        &:hover, &:focus {
            color: $components-color;
            text-decoration: none;
        }

        &[class*="--wired"] {
            background: transparent;
            color: $components-background;
            box-shadow: 0 0 0 $button-border-width $components-background inset;

            &::after {
                background: $components-background;
            }

            &:hover, &:focus {
                color: $components-color;
            }
        }
    }

    &[class*="-inversed"] {
        background: var(--components-background-inversed);
        color: var(--components-color-inversed);

        &::after {
            background: var(--components-background-hover-inversed);
        }

        &:hover, &:focus {
            color: var(--components-color-inversed);
            text-decoration: none;
        }

        &[class*="--wired"] {
            background: transparent;
            color: var(--components-background-inversed);
            box-shadow: 0 0 0 $button-border-width var(--components-background-inversed) inset;

            &::after {
                background: var(--components-background-inversed);
            }

            &:hover, &:focus {
                color: var(--components-color-inversed);
            }
        }
    }

    &[class*="--wired"] {
        @include transition("color");

		&::after {
            background: var(--components-background);
        }

        &:active {
            &::after {
                opacity: .8;
            }
        }

		&:hover, &:focus {
			color: var(--components-color);
		}
	}

    @each $component, $bg in $components {
		&[class*="-#{$component}"] {
            @if ($bg == transparent) {
                color: var(--body-color);
            } @else {
                color: contrast($bg, $body-color, $body-color-dark);
            }

			background: $bg;

            &::after {
                background: darken($bg, $components-hover-darken);
            }

            &:hover, &:focus {
                @if ($bg == transparent) {
                    color: var(--body-color);
                } @else {
                    color: contrast($bg, $body-color, $body-color-dark);
                }
                text-decoration: none;
            }

			&[class*="--wired"] {
				background: transparent;
				color: $bg;
				box-shadow: 0 0 0 $button-border-width $bg inset;

                &::after {
                    background: $bg;
                }

				&:hover, &:focus {
					color: contrast($bg, $body-color, $body-color-dark);
				}
			}
		}
	}
}

[class*="Tag"] {
    &[class*="--l"] {
		padding: $tag-padding-large;
		font-size: $tag-font-size-large;
	}

	&[class*="--xl"] {
		padding: $tag-padding-extra-large;
		font-size: $tag-font-size-extra-large;
	}
}

}
