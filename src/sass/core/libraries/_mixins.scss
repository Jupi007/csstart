@mixin option($names...) {
    $content: true;

    @each $name in $names {
        @if not getter($options, $name) {
    		$content: false;
    	}
    }

    @if $content {
        @content;
    }
}

@mixin utility-option($name, $area: "default") {
    $areas: (
        "default": 1,
        "responsive": 2,
        "dark-theme": 3,
        "print": 4,
    );

    $utility-options: getter($utilities-options, $name);
    @if nth($utility-options, getter($areas, $area)) and nth($utility-options, getter($areas, "default")) {
        @content;
    }
}

@mixin transition($property, $duration: $transition-duration-base, $timing-function: $transition-timing-function-base, $delay: 0) {
	@include option("transitions") {
        transition-property: #{$property};
		transition-duration: $duration;
		transition-timing-function: $timing-function;
        @if $delay > 0 {
            transition-delay: $delay;
        }
	}
}

@mixin respond-to($name, $direction: "up") {
	@if map-has-key($breakpoints, $name) {
		@if $direction == "up" {
			@media (min-width: #{map-get($breakpoints, $name)}) {
				@content;
			}
		}

		@else if $direction == "down" {
			@media (max-width: #{map-get($breakpoints, $name) - 1}) {
				@content;
			}
		}

        @else {
            @warn "Unfortunately, `#{$direction}` value is not valid. It should be `up` or `down`.";
        }
	}

	@else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoints}`. "
		+ "Please make sure it is defined in `$breakpoints` map.";
	}
}

@mixin print {
	@media print { @content; }
}

@mixin border-radius($border-radius) {
    @include option("border-radius") {
        @if type-of($border-radius) == number {
            @if $border-radius > 0 {
                border-radius: $border-radius;
            }
        }
        @else if type-of($border-radius) == list {
            $i: 0;
            @each $br in $border-radius {
                @if $br > 0 {
                    $i: $i + 1;
                }
            }
            @if $i > 0 {
                border-radius: $border-radius;
            }
        }
        @else {
            @warn "Unfortunately, `#{$border-radius}` value is not valid. It should be a number or a list.";
        }
    }
}

@mixin box-shadow($box-shadow) {
    @include option("box-shadow") {
        @if $box-shadow != none {
            box-shadow: $box-shadow;
        }
    }
}
