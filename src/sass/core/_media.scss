// ==============================================================
// ==== Media (responsive, dark, print) styles and utilities ====
// ==============================================================

@include option("responsive-utilities", "utilities") {
    @each $name, $value in $breakpoints {
    	@include respond-to($name, "up") {
            @include media-utilities("responsive", $name + "-");
    	}
    }
}

@include option("dark-theme-utilities", "utilities") {
    @media (prefers-color-scheme: dark) {
        @include media-utilities("dark-theme", class("dark-theme-prefix") + "-");
    }
}


// Media Print reset and utilities based on Gutenberg (https://github.com/BafS/Gutenberg)
@include option("print-styles") {
    @include print {
    	*,
    	*:before,
    	*:after,
    	p:first-letter,
    	div:first-letter,
    	blockquote:first-letter,
    	li:first-letter,
    	p:first-line,
    	div:first-line,
    	blockquote:first-line,
    	li:first-line {
    		background: transparent !important;
    		box-shadow: none !important;
    		text-shadow: none !important;
    	}

    	body {
    		font-smooth: always;
    		-moz-osx-font-smoothing: grayscale;
    		-webkit-font-smoothing: antialiased;
    		text-rendering: optimizeLegibility;
        	font-size: 12pt;
        	background: $print-body-bg;
            color: $print-body-color;
    	}

    	table,
    	blockquote,
    	pre,
    	code,
    	figure,
    	li,
    	hr,
    	ul,
    	ol,
    	a,
    	tr {
    		page-break-inside: avoid;
    	}

    	h1, h2, h3, h4, h5, h6,
    	p,
    	a {
    		orphans: 3;
    		widows: 3;
    	}

    	h1, h2, h3, h4, h5, h6 {
    		page-break-after: avoid;
    		page-break-inside: avoid;

    		& + p {
    			page-break-before: avoid;
    		}
    	}

    	img {
    		page-break-after: auto;
    		page-break-before: auto;
    		page-break-inside: avoid;
    	}

    	pre {
    		white-space: pre-wrap !important;
    		word-wrap: break-word;
    	}

    	::placeholder {
    		color: transparent;
    	}

        @include option("print-reformats") {
            a {
                &[href^='http'],
                &[href^='ftp'] {
                    &:after {
                        content: ' (' attr(href) ')';
                        font-size: 80%;
                    }
                }

                &[href$='.jpg'],
                &[href$='.jpeg'],
                &[href$='.gif'],
                &[href$='.png'] {
                    &:after {
                        display: none;
                    }
                }
            }

            abbr[title],
            acronym[title] {
                &:after {
                    content: ' (' attr(title) ')';
                }
            }

            a {
                &.#{class("print-prefix")}-#{class("(print)-no-reformat")}:after { content: ''; }
            }

            abbr,
            acronym {
                &[title] {
                    &.#{class("print-prefix")}-#{class("(print)-no-reformat")}:after { content: ''; }
                }
            }

            .#{class("print-prefix")}-#{class("(print)-no-reformat")} {
                abbr,
                acronym,
                a {
                    &:after { content: ''; }
                }
            }
        }

    	.#{class("print-prefix")} {
            &#{class("(print)-page-break")},
    		&#{class("(print)-page-break-before")} {
    			page-break-before: always!important;
    		}

    		&#{class("(print)-page-break-after")} {
    			page-break-after: always!important;
    		}
    	}

        @include option("utilities") {
            @include media-utilities("print", class("print-prefix"));
        }
    }
}
