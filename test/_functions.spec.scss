@include describe('getter()') {
    @include it('Returns the value corresponding to the given name in the given map') {
        @include assert-equal(getter($map, 'test-name'), 'test-value');
    }
    @include it('Returns an error') {
        @include assert-equal(getter($map, 'wrong-name'), null);
    }
}

@include describe('color()') {
    @include it('Returns the color corresponding to the given name') {
        @include assert-equal(color('white'), #ffffff);
    }
    @include it('Returns an error') {
        @include assert-equal(color('wrong-color'), null);
    }
}

@include describe('font-weight()') {
    @include it('Returns the font-weight corresponding to the given name') {
        @include assert-equal(font-weight('normal'), 400);
    }
    @include it('Returns an error') {
        @include assert-equal(font-weight('wrong-font-weight'), null);
    }
}

@include describe('spacer()') {
    @include it('Returns a css calc function which calculating a spacer') {
        @include assert-equal(spacer('large'), calc(var(--spacer-base) * 2));
    }
    @include it('Returns an error') {
        @include assert-equal(spacer('wrong-spacer'), null);
    }
}

@include describe('grey()') {
    @include it('Returns the shade of gray corresponding to the given percentage') {
        @include assert-equal(grey(77), #3b3b3b, $inspect: true);
    }
    @include it('Returns white color') {
        @include assert-equal(grey(0), #ffffff);
    }
    @include it('Returns black color') {
        @include assert-equal(grey(100), #000000);
    }
    @include it('Returns an error') {
        @include assert-equal(color(101), null);
    }
}

@include describe('brightness()') {
    @include it('Returns the brightness of white color') {
        @include assert-equal(brightness(#ffffff), 1);
    }
    @include it('Returns the brightness of dark color') {
        @include assert-equal(brightness(#000000), 0);
    }
    @include it('Returns the brightness of the given color') {
        @include assert-equal(brightness(#4aba73), .4902, $inspect: true);
    }
    @include it('Returns an error') {
        @include assert-equal(brightness("wrong-color"), null);
    }
}

@include describe('brightness_ratio()') {
    @include it('Returns the brightness ratio between black and white') {
        @include assert-equal(brightness_ratio(#ffffff, #000000), 1);
    }
    @include it('Returns the brightness ratio between white and white') {
        @include assert-equal(brightness_ratio(#ffffff, #ffffff), 0);
    }
    @include it('Returns the brightness ratio between the two given colors') {
        @include assert-equal(brightness_ratio(#953636, #93ecb7), 0.40392, $inspect: true);
    }
    @include it('Returns an error') {
        @include assert-equal(brightness_ratio("wrong-color", "wrong-color"), null);
    }
}

@include describe('contrast()') {
    @include it('Returns the best contrast color') {
        @include assert-equal(contrast(#953636, #ffffff, #000000), #ffffff);
    }
    @include it('Returns an error') {
        @include assert-equal(contrast("wrong-color", "wrong-color", "wrong-color"), null);
    }
}

@include describe('set-brightness()') {
    @include it('Returns dark color') {
        @include assert-equal(set-brightness(#4aba73, 0%), #000000);
    }
    @include it('Returns white color') {
        @include assert-equal(set-brightness(#4aba73, 100%), white, $inspect: true);
    }
    @include it('Returns the color corresponding to given color and brightness') {
        @include assert-equal(set-brightness(#4aba73, 25%), #235c38, $inspect: true);
    }
    @include it('Returns an error') {
        @include assert-equal(set-brightness("wrong-color", 50%), null);
    }
}
