@include describe('@mixin option()') {
    @include it('Check if the given option is enable') {
        @include assert {
            @include output {
                @include option('enabled-option') {
                    display: block;
                }
            }

            @include expect {
                display: block;
            }
        }
    }

    @include it('Check if the given option is disable') {
        @include assert {
            @include output {
                @include option('disabled-option') {
                    display: none;
                }
            }

            @include expect {}
        }
    }

    @include it('Check if the two given options are both enable') {
        @include assert {
            @include output {
                @include option('enabled-option') {
                    display: block;
                }
            }

            @include expect {
                display: block;
            }
        }
    }

    @include it('Check if one of the two given options is disable') {
        @include assert {
            @include output {
                @include option('enabled-option', 'disabled-option') {
                    display: none;
                }
            }

            @include expect {}
        }
    }
}

@include describe('@mixin utility-option()') {
    @include it('Check if the given utility is enabled') {
        @include assert {
            @include output {
                @include utility-option('area') {
                    display: block;
                }
                @include utility-option('area', "default") {
                    display: block;
                }
            }

            @include expect {
                display: block;
                display: block;
            }
        }
    }
    @include it('Check if the given utility is disabled') {
        @include assert {
            @include output {
                @include utility-option('disabled-area') {
                    display: none;
                }
                @include utility-option('disabled-area', "default") {
                    display: none;
                }
            }

            @include expect {}
        }
    }
    @include it('Check if the given utility is just enabled on default area') {
        @include assert {
            @include output {
                @include utility-option('enabled-area') {
                    display: block;
                }
                @include utility-option('enabled-area', "default") {
                    display: block;
                }

                @include utility-option('enabled-area', "responsive") {
                    display: none;
                }
                @include utility-option('enabled-area', "dark-theme") {
                    display: none;
                }
                @include utility-option('enabled-area', "print") {
                    display: none;
                }
            }

            @include expect {
                display: block;
                display: block;
            }
        }
    }
    @include it('Check if the given utility is just enabled on default and responsive area') {
        @include assert {
            @include output {
                @include utility-option('responsive-area') {
                    display: block;
                }
                @include utility-option('responsive-area', "default") {
                    display: block;
                }

                @include utility-option('responsive-area', "responsive") {
                    display: block;
                }
                @include utility-option('responsive-area', "dark-theme") {
                    display: none;
                }
                @include utility-option('responsive-area', "print") {
                    display: none;
                }
            }

            @include expect {
                display: block;
                display: block;
                display: block;
            }
        }
    }
    @include it('Check if the given utility is just enabled on default and dark-theme area') {
        @include assert {
            @include output {
                @include utility-option('dark-theme-area') {
                    display: block;
                }
                @include utility-option('dark-theme-area', "default") {
                    display: block;
                }

                @include utility-option('dark-theme-area', "responsive") {
                    display: none;
                }
                @include utility-option('dark-theme-area', "dark-theme") {
                    display: block;
                }
                @include utility-option('dark-theme-area', "print") {
                    display: none;
                }
            }

            @include expect {
                display: block;
                display: block;
                display: block;
            }
        }
    }
    @include it('Check if the given utility is just enabled on default and print area') {
        @include assert {
            @include output {
                @include utility-option('print-area') {
                    display: block;
                }
                @include utility-option('print-area', "default") {
                    display: block;
                }

                @include utility-option('print-area', "responsive") {
                    display: none;
                }
                @include utility-option('print-area', "dark-theme") {
                    display: none;
                }
                @include utility-option('print-area', "print") {
                    display: block;
                }
            }

            @include expect {
                display: block;
                display: block;
                display: block;
            }
        }
    }
}

@include describe('@mixin transition()') {
    @include it('Returns a set of transition properties based on given parameters (without delay)') {
        @include assert {
            @include output {
                @include transition(color, 1s, ease-in);
            }

            @include expect {
                transition-property: color;
        		transition-duration: 1s;
        		transition-timing-function: ease-in;
            }
        }
    }

    @include it('Returns a set of transition properties based on given parameters (with delay)') {
        @include assert {
            @include output {
                @include transition(color, 1s, ease-in, 0.5s);
            }

            @include expect {
                transition-property: color;
        		transition-duration: 1s;
        		transition-timing-function: ease-in;
                transition-delay: 0.5s;
            }
        }
    }

    @include it('Returns a set of transition properties based on default values') {
        @include assert {
            @include output {
                @include transition(opacity);
            }

            @include expect {
                transition-property: opacity;
        		transition-duration: 0.2s;
        		transition-timing-function: ease;
            }
        }
    }
}

@include describe('@mixin respond-to()') {
    @include it('Returns content into a @media block (to up)') {
        @include assert {
            @include output {
                @include respond-to('medium', 'up') {
                    display: block;
                }
            }

            @include expect {
                @media (min-width: 48rem) {
                    display: block;
                }
            }
        }
    }

    @include it('Returns content into a @media block (to down)') {
        @include assert {
            @include output {
                @include respond-to('medium', 'down') {
                    display: block;
                }
            }

            @include expect {
                @media (max-width: 47.9375rem) {
                    display: block;
                }
            }
        }
    }

    /*@include it('Returns an error') {
        @include assert {
            @include output {
                @include respond-to("wrong-breakpoint") {
                    display: none;
                }
            }

            @include expect {}
        }
    }

    @include it('Returns an error') {
        @include assert {
            @include output {
                @include respond-to("medium", "wrong-direction") {
                    display: none;
                }
            }

            @include expect {}
        }
    }*/
}

@include describe('@mixin print()') {
    @include it('Returns content into a @media print block') {
        @include assert {
            @include output {
                @include print {
                    display: block;
                }
            }

            @include expect {
                @media print {
                    display: block;
                }
            }
        }
    }
}

@include describe('@mixin border-radius()') {
    @include it('Check if the border-radius option is enable and return the given border-radius only if it is upper than 0') {
        @include assert {
            @include output {
                @include border-radius(1px);
                @include border-radius(0 1px);
                @include border-radius(0 1px 0 0);
            }

            @include expect {
                border-radius: 1px;
                border-radius: 0 1px;
                border-radius: 0 1px 0 0;
            }
        }
    }

    @include it('Check if the given border-radius is equal to 0') {
        @include assert {
            @include output {
                @include border-radius(0px);
                @include border-radius(0);
                @include border-radius(0 0px);
                @include border-radius(0 0px 0 0);
            }

            @include expect {}
        }
    }
}

@include describe('@mixin box-shadow()') {
    @include it('Check if the box-shadow option is enable and return the given box-shadow only if it is different from null') {
        @include assert {
            @include output {
                @include box-shadow(1px 1px 2px black);
            }

            @include expect {
                box-shadow: 1px 1px 2px black;
            }
        }
    }

    @include it('Check if the given box-shadow is equal to null') {
        @include assert {
            @include output {
                @include box-shadow(null);
            }

            @include expect {}
        }
    }
}
